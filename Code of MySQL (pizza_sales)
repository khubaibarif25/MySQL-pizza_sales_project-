create database crusthut; 

create table orders (
order_id int not null,
order_date date not null,
order_time time not null,
primary key (order_id) );  


create table order_details (
order_details_id int not null,
order_id int not null,
pizza_id text not null,
quantity int not null,
primary key (order_details_id) ); 

SOLUTIONS: 

BASIC LEVEL: 

-- retrieve total number of orders

SELECT 
    COUNT(order_id) AS total_orders
FROM
    orders;   


-- Calculate total revenue generated from pizza sales 

SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS total_revenue
FROM
    order_details
        JOIN
    pizzas ON pizzas.pizza_id = order_details.pizza_id



-- identify hightest price pizza

SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1; 



-- identify mostly common ordered pizza size 


SELECT 
    pizzas.size,
    COUNT(order_details.order_details_id) AS order_count
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzas.size
ORDER BY order_count DESC; 



-- list the top 5 most ordered pizza types along with their pizza quantiy

SELECT 
    pizza_types.name, SUM(order_details.quantity) AS quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY quantity DESC
LIMIT 5; 

INTERMIDIATE LEVEL: 

-- join the necessary tables to find the 
-- total quantity of each pizza category ordered. 

SELECT 
    pizza_types.category,
    SUM(order_details.quantity) AS quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY quantity DESC; 



-- determine the distribution of orders by hour of the day 

SELECT 
    HOUR(order_time) AS hours, COUNT(order_id) AS order_count
FROM
    orders
GROUP BY HOUR(order_time);




-- Join the relevant tables to find category-wise distribution of pizzas

SELECT 
    category, COUNT(name)
FROM
    pizza_types
GROUP BY category; 




-- group the orders by date and find average 
-- of numbers of pizzas ordered per day 

SELECT 
    ROUND(AVG(quantity), 0) as avg_pizza_ordered_per_day
FROM
    (SELECT 
        orders.order_date, SUM(order_details.quantity) AS quantity
    FROM
        orders
    JOIN order_details ON orders.order_id = order_details.order_id
    GROUP BY orders.order_date) AS order_quantity; 



-- determine the top 3 most ordered pizza types based on revenue 

SELECT 
    pizza_types.name,
    SUM(order_details.quantity * pizzas.price) AS revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY revenue DESC
LIMIT 3;

ADVANCE LEVEL:


-- calculate the percentage contribution 
-- of each pizza type of total revenue 

SELECT 
    pizza_types.category,
    ROUND(SUM(order_details.quantity * pizzas.price) / (SELECT 
                    ROUND(SUM(order_details.quantity * pizzas.price),
                                2) AS total_Sales
                FROM
                    order_details
                        JOIN
                    pizzas ON pizzas.pizza_id = order_details.pizza_id) * 100,
            2) AS revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY revenue DESC;




-- analyze cumulated revenue genereated over time 


select order_date,
sum(revenue) over (order by order_date) as cum_revenue 
from 
(select orders.order_date, 
sum(order_details.quantity*pizzas.price) as revenue 
from order_details join pizzas 
on order_details.pizza_id=pizzas.pizza_id 
join orders 
on orders.order_id = order_details.order_id 
group by orders.order_date) as sales; 



-- determine top 3 most ordered pizza types
-- based on revenue of each pizza category 
select name, category, revenue 
from 
(select category, name, revenue,
rank() over(partition by category order by revenue desc) as rn
from
(select pizza_types.category, pizza_types.name, 
sum(order_details.quantity*pizzas.price) as revenue 
from pizza_types join pizzas on 
pizza_types.pizza_type_id = pizzas.pizza_type_id
join order_details
on order_details.pizza_id = pizzas.pizza_id 
group by pizza_types.category, pizza_types.name) as a) as b  
where rn <= 3;  
